#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 2"
  https://create.arduino.cc/cloud/things/2693770b-5b1a-4ccd-a5b5-3df51bc30464 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  bool led;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

// CETA 2025 
// Code from Devious Birds 
// Made by Abir Khaund-Hazarika(a_beer), Aaron Chan, Minh Dang, Darvin Gutierrez 
// Challenge 3: IoT 
// Circuit diagram @ https://wokwi.com/projects/428782660635648001 
// Using L293D motor driver with QRE1113 IR Sensors and HC-05 Distance Sensor

#include "thingProperties.h"

// IR Sensor Pins
#define left A0
#define center A1
#define right A2

// Motor Control Pins
int enableLeft = 5;
int MotorLeft1 = 7;
int MotorLeft2 = 2;
int enableRight = 3;
int MotorRight1 = 9;
int MotorRight2 = 4;

// Sensor values
int leftVal, centerVal, rightVal;
int avgWhite = 300;

// Button control
int buttonState = 0;
int previousState = 0;
unsigned long pressStartTime = 0;
const long holdDuration = 3000;
bool toggleState = false;

// Counters
int lineCounter = 0;
int counter = 0;
bool inBlackArea = false;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  pinMode(enableLeft, OUTPUT);
  pinMode(MotorLeft1, OUTPUT);
  pinMode(MotorLeft2, OUTPUT);
  pinMode(enableRight, OUTPUT);
  pinMode(MotorRight1, OUTPUT);
  pinMode(MotorRight2, OUTPUT);
  pinMode(left, INPUT);
  pinMode(center, INPUT);
  pinMode(right, INPUT);
  pinMode(12, INPUT);
}

void loop() {
  ArduinoCloud.update();
  Serial.print("LED Value: ");
  Serial.print(led);
  
  leftVal = analogRead(left);
  centerVal = analogRead(center);
  rightVal = analogRead(right);

  // Print the sensor readings for debugging
  Serial.print(" Line Counter: ");
  Serial.print(lineCounter);
  Serial.print(" Position: (");
  Serial.print(leftVal);
  Serial.print(", ");
  Serial.print(centerVal);
  Serial.print(", ");
  Serial.print(rightVal);
  Serial.print(") ");

  buttonState = digitalRead(12);
  if (buttonState == HIGH && previousState == LOW) {
    pressStartTime = millis();
  }
  if (buttonState == LOW && previousState == HIGH) {
    unsigned long pressDuration = millis() - pressStartTime;
    if (pressDuration >= holdDuration) {
      calibrate_sensor();
    }
  }

  if (led==1) {
    if (lineCounter == 5) {
      forward();
      Serial.println("FINAL FORWARD");
      delay(500);
      stop();
      while (true) {}  // Halt
    }

    if (lineCounter < 1) {
      forward();
      Serial.println("FORWARD INIT");
      delay(150);
      lineCounter++;
    } else if (leftVal >= avgWhite && centerVal >= avgWhite && rightVal >= avgWhite) {
      if (!inBlackArea) {
        lineCounter++;
        inBlackArea = true;
        Serial.print("Line Counter incremented to: ");
        Serial.println(lineCounter);
      }
      if (lineCounter < 5) {
        turn_around();
        delay(450);
        while (analogRead(left) <= avgWhite) {
          turn_around();
        }
      }
    } else {
      inBlackArea = false;
    }

    if (leftVal >= avgWhite) {
      turn_left();
      counter = 1;
      Serial.println("LEFT");
    } else if (rightVal >= avgWhite) {
      turn_right();
      counter = 2;
      Serial.println("RIGHT");
    } else if (leftVal <= avgWhite && rightVal <= avgWhite && centerVal <= avgWhite) {
      if (counter == 1) {
        sharp_left();
        Serial.println("SHARP LEFT");
      } else if (counter == 2) {
        sharp_right();
        Serial.println("SHARP RIGHT");
      } else {
        forward();
        Serial.println("FORWARD (default)");
      }
    } else {
      forward();
      counter = 0;
      Serial.println("FORWARD (else)");
    }
  } else {
    stop();
  }

  previousState = buttonState;
  Serial.println();
}

/*
  Since Led is READ_WRITE variable, onLedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLedChange()  {
  // Add your code here to act upon Led change
}

void calibrate_sensor() {
  Serial.println("\nCALIBRATING...");
  int avgSensorLeft = 0, avgSensorCenter = 0, avgSensorRight = 0;
  int sensorReadings = 1000;

  for (int i = 0; i < sensorReadings; i++) {
    avgSensorLeft += analogRead(left);
    avgSensorCenter += analogRead(center);
    avgSensorRight += analogRead(right);
  }

  avgWhite = (avgSensorLeft + avgSensorCenter + avgSensorRight) / (3 * sensorReadings);
  Serial.print("Average White Value: ");
  Serial.println(avgWhite);
  delay(100);
}

void forward() {
  analogWrite(enableLeft, 255);
  analogWrite(enableRight, 255);
  digitalWrite(MotorLeft1, HIGH);
  digitalWrite(MotorRight1, HIGH);
  digitalWrite(MotorLeft2, LOW);
  digitalWrite(MotorRight2, LOW);
}

void stop() {
  digitalWrite(MotorLeft1, LOW);
  digitalWrite(MotorRight1, LOW);
  digitalWrite(MotorLeft2, LOW);
  digitalWrite(MotorRight2, LOW);
}

void turn_right() {
  analogWrite(enableLeft, 255);
  analogWrite(enableRight, 150);
  digitalWrite(MotorLeft1, HIGH);
  digitalWrite(MotorRight1, HIGH);
  digitalWrite(MotorLeft2, LOW);
  digitalWrite(MotorRight2, LOW);
}

void turn_left() {
  analogWrite(enableLeft, 150);
  analogWrite(enableRight, 255);
  digitalWrite(MotorLeft1, HIGH);
  digitalWrite(MotorRight1, HIGH);
  digitalWrite(MotorLeft2, LOW);
  digitalWrite(MotorRight2, LOW);
}

void sharp_right() {
  analogWrite(enableLeft, 255);
  analogWrite(enableRight, 0);
  digitalWrite(MotorLeft1, HIGH);
  digitalWrite(MotorRight1, HIGH);
  digitalWrite(MotorLeft2, LOW);
  digitalWrite(MotorRight2, LOW);
}

void sharp_left() {
  analogWrite(enableLeft, 0);
  analogWrite(enableRight, 255);
  digitalWrite(MotorLeft1, HIGH);
  digitalWrite(MotorRight1, HIGH);
  digitalWrite(MotorLeft2, LOW);
  digitalWrite(MotorRight2, LOW);
}

void turn_around() {
  analogWrite(enableLeft, 255);
  analogWrite(enableRight, 255);
  digitalWrite(MotorLeft1, LOW);
  digitalWrite(MotorRight1, HIGH);
  digitalWrite(MotorLeft2, HIGH);
  digitalWrite(MotorRight2, LOW);
}
